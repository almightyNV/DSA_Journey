class Solution {
    public static int binaryBitonicSearch(int[] arr,int t) {
        int l = 1, r = arr.length-2;

        if(arr.length == 1 && arr[0] != t) return -1;
        if(arr[0] == t) return 0;
        if(arr[1] == t) return 1;
        if(arr[0]!=t && arr[1]!=t && arr.length==2) return -1;

        int ans = -1,res = -1;

        while(l <= r) {
            int mid = l+(r-l)/2;

            if(arr[mid] == t) return mid;
            else if(arr[mid]>arr[mid+1] && arr[mid]>arr[mid-1]) {
                ans = binarySearch(arr,0,mid,t);
                res = revbinary(arr,mid,arr.length-1,t);
                break;
            } else if(arr[mid] < arr[mid+1]) l = mid;
            else r = mid;
        }

        if(ans==-1 && res==-1) return res;
        else if(ans==-1 && res!=-1) return res;
        else return ans;
    }

    public static int binarySearch(int[] arr,int l,int r, int t) {

        if(arr[l] > arr[r]) return -1;

        while(l <= r) {
            int mid = l + (r-l)/2;

            if(arr[mid] == t) return mid;

            if(arr[mid] > t) r = mid-1;
            else l = mid+1;
        }

        return -1;
    }

    public static int revbinary(int[] arr,int l,int r, int t) {

        if(arr[l] < arr[r]) {
            return -1;
        }

        while(l <= r) {
            int mid = l + (r-l)/2;

            if(arr[mid] == t) return mid;

            if(arr[mid] > t) l = mid+1;
            else r = mid-1;
        }

        return -1;
    }


}